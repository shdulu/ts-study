{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* 启用项目编译 Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es5"   /* 指定ECMAScript的目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
    "lib": ["dom", "ESNext"] /* 指定编译的时候用来包含的编译文件. */,
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    "experimentalDecorators": true /* 启动装饰器. */,
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "commonjs" /* 指定模块代码的生成方式:  'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'.*/,
    // "rootDir": "./",                                  /* 指定输入文件的根目录，用--outDir来控制输出的目录结构. */
    // "moduleResolution": "node",                       /* 指定模块的解析策略 node classic Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* 在解析非绝对路径模块名的时候的基准路径 Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* 一些路径的集合 Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* 根目录的列表，在运行时用来合并内容 Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* 用来包含类型声明的文件夹列表 Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* 在编译的时候被包含的类型声明 Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许编译JS文件. */
    // "checkJs": true,                                  /* 在JS中包括错误. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* 生成相应的类型声明文件. */
    // "declarationMap": true,                           /* 为每个类型声明文件生成相应的sourcemap. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* 生成对应的 .map 文件. */
    // "outFile": "./",                                  /* 合并并且把编译后的内容输出 到一个文件里. */
    // "outDir": "./",                                   /* 按原始结构输出到目标目录. */
    // "removeComments": true,                           /* 移除注释. */
    // "noEmit": true,                                   /* 不要输出 */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    "downlevelIteration": true /* 当目标是ES5或ES3的时候提供对for-of、扩展运算符和解构赋值中对于迭代器的完整支持. Emit more compliant, but verbose and less performant JavaScript for iteration. */,
    // "sourceRoot": "",                                 /* 指定ts文件位置. Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* 指定 map文件存放的位置. Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* 源文件和sourcemap 文件在同一文件中，而不是把map文件放在一个单独的文件里. Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* 源文件和sourcemap 文件在同一文件中 Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 把每一个文件转译成一个单独的模块. Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* 当没有默认导出的时候允许默认导入，这个在代码执行的时候没有作用，只是在类型检查的时候生效. Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    // "preserveSymlinks": true,                         /* 不要symlinks解析的真正路径 Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* 启用完全的严格类型检查. Enable all strict type-checking options. */,
    // "noImplicitAny": true,                            /* 不能使用隐式的any类型 */
    "strictNullChecks": true, /* 启用严格的NULL检查. When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* 启用严格的函数类型检查. When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* 启用函数上严格的bind call 和apply方法. Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    "strictPropertyInitialization": true,             /* 启用类上初始化属性检查. Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* 在默认的any中调用 this表达式报错 Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 在严格模式下解析并且向每个源文件中发射use strict Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* 有未使用到的本地变量时报错 Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* 有未使用到的参数时报错 Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 当不是所有的代码路径都有返回值的时候报错 Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* 在switch表达式中没有替代的case会报错 Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
